name: Build and Publish Installers

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

env:
  FLUTTER_CHANNEL: stable

jobs:
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true

      - name: Generate Android platform project
        run: flutter create . --platforms=android

      - name: Install dependencies
        run: flutter pub get

      - name: Build debug APKs per ABI
        run: flutter build apk --debug --split-per-abi

      - name: Collect artifact
        run: |
          set -euo pipefail
          mkdir -p installers/android
          shopt -s nullglob
          generated=(build/app/outputs/flutter-apk/app-*-debug.apk)
          if [ ${#generated[@]} -eq 0 ]; then
            echo "No ABI-specific APKs were generated" >&2
            exit 1
          fi
          for apk in "${generated[@]}"; do
            basename="$(basename "$apk")"
            abi="${basename#app-}"
            abi="${abi%-debug.apk}"
            cp "$apk" "installers/android/scriptagher-${abi}-debug.apk"
          done

      - name: Upload Android artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: installers/android

  build-linux:
    name: Build Linux bundle
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Linux build prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true

      - name: Generate Linux platform project
        run: flutter create . --platforms=linux

      - name: Install dependencies
        run: flutter pub get

      - name: Build release bundle
        run: flutter build linux --release

      - name: Package Linux artifact
        run: |
          mkdir -p installers/linux
          tar -czf installers/linux/scriptagher-linux-x64.tar.gz -C build/linux/x64/release bundle

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-bundle
          path: installers/linux

  build-windows:
    name: Build Windows installer
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true

      - name: Generate Windows platform project
        run: flutter create . --platforms=windows

      - name: Install dependencies
        run: flutter pub get
        shell: pwsh

      - name: Build release binaries
        run: flutter build windows --release
        shell: pwsh

      - name: Install Inno Setup
        run: choco install innosetup --no-progress -y
        shell: pwsh

      - name: Extract version
        id: version
        shell: pwsh
        run: |
          $pattern = '^version:\s*(.+)$'
          $match = Select-String -Path pubspec.yaml -Pattern $pattern | Select-Object -First 1
          if (-not $match) {
            throw 'Unable to determine version from pubspec.yaml'
          }
          $version = $match.Matches[0].Groups[1].Value.Trim()
          "app_version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Prepare installer output directory
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path installers/windows | Out-Null

      - name: Build Windows installer
        shell: pwsh
        run: |
          $sourceDir = Resolve-Path 'build/windows/x64/runner/Release'
          $outputDir = Resolve-Path 'installers/windows'
          $iscc = Resolve-Path "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe"
          & $iscc "/DAPP_VERSION=${{ steps.version.outputs.app_version }}" "/DSOURCE_DIR=$sourceDir" "/DOUTPUT_DIR=$outputDir" "tool/windows-installer.iss"

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: installers/windows

  build-macos:
    name: Build macOS disk image
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true

      - name: Generate macOS platform project
        run: flutter create . --platforms=macos

      - name: Install dependencies
        run: flutter pub get

      - name: Build release app
        run: flutter build macos --release

      - name: Package DMG
        run: |
          mkdir -p installers/macos
          APP_PATH="build/macos/Build/Products/Release/Scriptagher.app"
          if [ ! -d "$APP_PATH" ]; then
            echo "macOS app bundle not found at $APP_PATH" >&2
            exit 1
          fi
          mkdir -p dist-dmg
          cp -R "$APP_PATH" dist-dmg/
          hdiutil create installers/macos/Scriptagher-macos.dmg -volname "Scriptagher" -srcfolder dist-dmg -ov -format UDZO

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-dmg
          path: installers/macos

  build-ios:
    name: Build iOS archive
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true

      - name: Generate iOS platform project
        run: flutter create . --platforms=ios

      - name: Install dependencies
        run: flutter pub get

      - name: Build unsigned iOS app
        run: flutter build ios --release --no-codesign

      - name: Package IPA
        run: |
          mkdir -p installers/ios
          APP_PATH="build/ios/iphoneos/Runner.app"
          if [ ! -d "$APP_PATH" ]; then
            echo "iOS app bundle not found at $APP_PATH" >&2
            exit 1
          fi
          WORK_DIR="Payload"
          rm -rf "$WORK_DIR"
          mkdir -p "$WORK_DIR"
          cp -R "$APP_PATH" "$WORK_DIR/"
          zip -r installers/ios/Scriptagher-ios.ipa "$WORK_DIR"

      - name: Upload iOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: installers/ios

  deploy-gh-pages:
    name: Publish installers to GitHub Pages
    needs:
      - build-android
      - build-linux
      - build-windows
      - build-macos
      - build-ios
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare installers directory
        run: |
          rm -rf installers
          mkdir -p installers

      - name: Download Android artifact
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          path: installers/android

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-bundle
          path: installers/linux

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-installer
          path: installers/windows

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-dmg
          path: installers/macos

      - name: Download iOS artifact
        uses: actions/download-artifact@v4
        with:
          name: ios-ipa
          path: installers/ios

      - name: Generate installer metadata
        run: |
          python - <<'PY'
          import datetime
          import hashlib
          import json
          import os
          import re

          def read_version(path: str) -> str:
              pattern = re.compile(r"^version:\s*(.+)$")
              with open(path, encoding="utf-8") as handle:
                  for raw_line in handle:
                      match = pattern.match(raw_line.strip())
                      if match:
                          return match.group(1)
              raise RuntimeError("Unable to determine version from pubspec.yaml")

          def sha256sum(path: str) -> str:
              digest = hashlib.sha256()
              with open(path, "rb") as stream:
                  for chunk in iter(lambda: stream.read(8192), b""):
                      digest.update(chunk)
              return digest.hexdigest()

          def extension_for(filename: str) -> str:
              lowered = filename.lower()
              if lowered.endswith(".tar.gz"):
                  return "tar.gz"
              return filename.rsplit(".", 1)[-1].lower()

          def linux_arch_label(identifier: str) -> str:
              return {
                  "x64": "x86_64",
              }.get(identifier, identifier)

          def android_arch_label(identifier: str) -> str:
              mapping = {
                  "arm64-v8a": "ARM64-v8a",
                  "armeabi-v7a": "ARMv7",
                  "x86_64": "x86_64",
              }
              return mapping.get(identifier, identifier)

          def build_metadata(rel_path: str, version: str, base_url: str, timestamp: str) -> dict:
              platform_dir, file_name = rel_path.split(os.sep, 1)
              platform_names = {
                  "android": "Android",
                  "ios": "iOS",
                  "linux": "Linux",
                  "macos": "macOS",
                  "windows": "Windows",
              }
              platform = platform_names.get(platform_dir, platform_dir.capitalize())
              extension = extension_for(file_name)
              file_stem = file_name
              if extension == "tar.gz":
                  file_stem = file_name[: -len(".tar.gz")]
              elif "." in file_name:
                  file_stem = file_name[: file_name.rfind(".")]

              metadata = {
                  "name": f"Scriptagher for {platform}",
                  "platform": platform,
                  "version": version,
                  "file_name": file_name,
                  "file_size": os.path.getsize(os.path.join("installers", rel_path)),
                  "sha256": sha256sum(os.path.join("installers", rel_path)),
                  "download_url": f"{base_url}/{rel_path.replace(os.sep, '/')}",
                  "format": extension.upper(),
                  "last_updated": timestamp,
              }

              if platform_dir == "android":
                  variant = "Debug"
                  abi_part = file_stem
                  if abi_part.startswith("scriptagher-"):
                      abi_part = abi_part[len("scriptagher-"):]
                  if abi_part.endswith("-debug"):
                      abi_part = abi_part[: -len("-debug")]
                  metadata["architecture"] = android_arch_label(abi_part)
                  metadata["build_variant"] = variant
                  metadata["name"] = f"Scriptagher for {platform} ({metadata['architecture']} · {variant} Build)"
              elif platform_dir == "linux":
                  parts = file_stem.split("-")
                  arch_identifier = parts[-1] if len(parts) >= 1 else "x86_64"
                  architecture = linux_arch_label(arch_identifier)
                  metadata["architecture"] = architecture
                  metadata["build_variant"] = "Release"
                  metadata["name"] = f"Scriptagher for {platform} ({architecture} · Release Build)"
              elif platform_dir == "windows":
                  metadata["architecture"] = "x86_64"
                  metadata["build_variant"] = "Release"
                  metadata["distribution"] = "Installer"
                  metadata["name"] = "Scriptagher for Windows (64-bit Installer)"
              elif platform_dir == "macos":
                  metadata["build_variant"] = "Release"
                  metadata["distribution"] = "Disk Image"
                  metadata["name"] = "Scriptagher for macOS (Release Build)"
              elif platform_dir == "ios":
                  metadata["build_variant"] = "Release"
                  metadata["distribution"] = "IPA Package"
                  metadata["name"] = "Scriptagher for iOS (Release Build)"

              return metadata

          version = read_version("pubspec.yaml")
          repository = os.environ.get("GITHUB_REPOSITORY", "scriptagher/scriptagher")
          if "/" in repository:
              owner, repo_name = repository.split("/", 1)
          else:
              owner, repo_name = repository, repository
          base_url = f"https://{owner}.github.io/{repo_name}/installers"
          timestamp = datetime.datetime.utcnow().replace(microsecond=0).isoformat() + "Z"

          artifacts = []
          installers_root = "installers"
          for root, _, files in os.walk(installers_root):
              for file_name in files:
                  if file_name.startswith('.'):
                      continue
                  if file_name.endswith(".json"):
                      continue
                  rel_path = os.path.relpath(os.path.join(root, file_name), installers_root)
                  if rel_path == ".nojekyll":
                      continue
                  metadata = build_metadata(rel_path, version, base_url, timestamp)
                  artifacts.append(metadata)
                  target_json = os.path.splitext(os.path.join(root, file_name))[0]
                  if file_name.lower().endswith(".tar.gz"):
                      target_json = os.path.join(root, file_name[: -len(".tar.gz")])
                  json_path = f"{target_json}.json"
                  with open(json_path, "w", encoding="utf-8") as handle:
                      json.dump(metadata, handle, indent=2, ensure_ascii=False)
                      handle.write("\n")

          artifacts.sort(key=lambda item: item["download_url"])
          summary_path = os.path.join(installers_root, "metadata.json")
          with open(summary_path, "w", encoding="utf-8") as handle:
              json.dump({
                  "generated_at": timestamp,
                  "installers": artifacts,
              }, handle, indent=2, ensure_ascii=False)
              handle.write("\n")
          PY

      - name: Create .nojekyll marker
        run: touch installers/.nojekyll

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: installers
          destination_dir: installers
          keep_files: true
          user_name: github-actions[bot]
          user_email: 41898282+github-actions[bot]@users.noreply.github.com
